plugins {
    id 'org.scoverage' apply false
}

allprojects {
    repositories {
        jcenter()
    }
}

description = 'a multi-module Scala project that builds successfully with 100% coverage'

allprojects {

    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'org.scoverage'

    dependencies {
        implementation group: 'org.scala-lang', name: 'scala-library', version: "${scalaVersionMajor}.${scalaVersionMinor}.${scalaVersionBuild}"

        testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: junitVersion
        testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: junitPlatformVersion

        testImplementation group: 'org.scalatest', name: "scalatest_${scalaVersionMajor}.${scalaVersionMinor}", version: scalatestVersion
    }

    test {
        useJUnitPlatform()
        maxParallelForks = 1
    }

    configurations {
        intTestImplementation.extendsFrom testImplementation
        intTestRuntimeOnly.extendsFrom testRuntimeOnly
    }
    sourceSets {
        intTest {
            resources.srcDir file('src/intTest/resources')
            scala {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file("${projectDir}/src/intTest/scala")
            }
        }
    }


    task intTest(type: Test) {
        testClassesDirs = sourceSets.intTest.output.classesDirs
        classpath = sourceSets.intTest.runtimeClasspath
        outputs.upToDateWhen { false }

        maxParallelForks = 1
    }
    check.dependsOn(intTest)
    intTest.mustRunAfter(test)

    scoverage {
        minimumRate = 0.5
    }
}
